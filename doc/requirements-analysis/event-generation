Concepts:

  TradableProcessorSpecification

  - analysis profile [DB]: Set of specs to use for a run; all events for
    a run are tagged/associated with the profile used for the run.
  - analysis run: An event-generation/analysis run that uses a specific
    profile and that produces an analysis report
  - analysis report [DB?]: A structured "report" of the results of a run.
  - notification profile [DB]: a "schedule" <@@define this, please@@> and
    associated analysis profile that results in a periodic analysis run with
    run times defined by the "schedule"


List of concepts mentioned above or implied by the above (some of which
imply models/database-tables):

  - analysis profile
  - analysis run
  - analysis report: profile-name; date/time of run; ...; the report
    (important - or possibly all - components) will be stored in the
    database.
  - user-notification-method/device
  - tradable-processor
  - tradable-indicator
  - tradable-analyzer

Scenarios:

(1) User creates an analysis profile with the GUI/web-interface.  User chooses
option to run the analysis with that profile and an "analysis report" is
displayed when it completes.  User then chooses option to save that profile
to the database.  (Or the user can make changes to the profile, run another
report, save the profile, or etc.)  When the profile is saved, the user is
also given the option to save the results of any report he runs with that
(now persistent) profile to he database, as well; or he can simply exit the
profile-creation/editing page, or start on another profile, or log out.

(2) It will probably be useful to provide a "streamlined" way of creating a
profile and running analysis with it - for a new user that just wants to
quickly try the system out or an existing user who sometimes wants to just
set up and run some quick analyses to check out something or other.
This might look similar to the current home (e.g.,
"http://10.10.1.22:3000/") screen (with the option to choose a stock and
period-type and hit "view chart" or, below that, to choose a set of stock
symbols and a set of analyzers and start/end dates, then hit "run analysis").
But period-type will probably also need to be added - for each analyzer.
Maybe on first use a "default profile", with default values, will be used
for this page and the user can (right away or later) edit this profile,
or, if she has created and saved one or more profiles at this point, choose
one of those profiles to use for this screen.

(3) User (from the appropriate web page/URL) chooses one (or more) of his
analysis profiles to edit, changes start-/end-dates, adds and remove
event generators, and chooses 0 or more event generators to edit -
for generator g do 0 or more of:
  - Change the period type of g.
  - Change the value of one or more of g's parameters.

[!!!how to keep implied settings for all indicators selected for the current
chart for the current period type - possible answer: see
"charting-specification"]
(4a) On the charting page, user chooses one or more indicators to add to the
chart.  Each charted indicator will, of course, use the period-type that
was chosen for the current chart.  (If the user changes the period type
of the chart, all selected indicators will, of course, again use this
same period type.)  The user can choose one of the charted indicators
(using an interface/page/... to-be-determined) and change the indicator's
parameter settings.  Once the user has confirmed these changes (for the
currently-selected indicator), the new parameter settings will be saved in
the database.  Whenever an indicator is selected to be charted, its last
settings associated with the chart's current period-type will be retrieved
from the database and used for the chart.  If there are no settings in the DB
yet for that indicator/period-type, default settings will be used.

(4b) On the charting page, user changes the period-type.  The database
is queried for each indicator for the indicator's parameter settings
for that period-type (and the request to the MAS server is adjusted
accordingly).  For any indicator for which parameters are not in the
database for that period-type, the previous parameter settings (i.e.,
the settings for the old period-type) for that indicator are used for the
chart.  If the user then edits one of these indicators, these settings
will then be saved to the database for the current period-type, as
described in 4a.  (NOTE: This scenario assumes that the default parameter
settings for a particular indicator apply to all period types.  On the
other hand, if there are default settings for each period type, those
settings will, of course, be used if there are no settings in the database
for that particular indicator/period-type.)  Note: For simplicity, it might
be wise to use, for an indicator, the same parameter settings for all
period types since most users will probably not want different parameter
settings for different period types.  In this case, to allow the user to
have different settings per period-type, there will need to be a "switch"
of some kind to allow changing an indicator's parameters only for the
current period type.

(5) User deletes one or more analysis profiles.

(6) User creates a "notification profile" (is there a better name?), which
consists of:
  - an analysis profile (selected by name?)
  - the schedule by which the profile will be run - perhaps a one-time run
    will be possible (e.g., run this profile next Monday at 16:30 Eastern
    Time), but usually the schedule will result in a periodic run - e.g.,
    "run this profile every trading day at 16:30", or "run this profile
    every hour during regular market hours on trading days".
  - The methods/media (often just one, but can be several) the user has
    specified to be notified of resulting events.

(7) An analysis run occurs for user X, which results in an email (or
text, push notification, database update, ... - according to what the user
specified in her notification profile) sent to user X with a formatted
report of each event generated during the run.  Below is a more detailed
breakdown of what occurs before (i.e., triggers) and during an analysis run.

(7a) [(7) - triggering of analysis run, in detail, with an EventBasedTrigger]
[part 1: (US EOD example)]
A daemon process assigned to, each trading day, wait for and report when
end-of-day data is available discovers that, a few minutes after market
closing time for US stocks, EOD data for US stocks is available.  The
process then updates the record in "event_based_triggers" table where
'triggered_event_type' = EOD_US_stocks: It sets 'active' to true.
(Note: In other words, this event invokes the trigger (by setting 'active'
to true).)
[part 2:]
(Note: action/process is triggered by the above event - i.e., it starts
analysis as a result of the event.)
Another daemon process (whose job is to periodically check for new
trigger events [e.g., in the event_based_triggers or periodic_triggers table])
discovers (via a query such as "select id from event_based_triggers where
active = true") that the record in event_based_triggers for EOD_US_stocks
with the 'active' attribute set to true.  It then:

  - Updates 'status' to "running" (from "completed") in the analysis_runs
    [proposed] table.  (Other possible states might include: "stopped" and
    "failed".) [subject to data-model change/elaboration/extension]
  - Starts the corresponding analysis run [See (7c).]
(Note: This design might change such that the daemon process in 7a-part1
starts the analysis run instead of this process (i.e., in 7a-part2)
starting it - in other words, the 7a-part2 process might be eliminated.
However, my current thinking is that the 2-process version documented above
is a better, more flexible design.)

(7b) [(7) - triggering of analysis run, in detail, with an PeriodicTrigger]
A daemon process assigned to, each trading day, function as an alarm clock
and take the time settings in PeriodicTrigger, and when a configured time
occurs:

  - Updates 'status' to "running" in the analysis_runs table.  (See
    "Updates 'status'..." in (7a) for more details.)
  - "wakes up" (or starts) the scheduled analysis run.

(Note: this is an action/process that is triggered by a time-based event -
In other words, the scheduled time being reached is the trigger and this
process's starting of a corresponding analysis run is the action resulting
from the trigger.)
(Note2: This will logically involve analysis of intraday data since a
periodic run of every <n> minutes, several times a day does not make
sense for daily data since that data won't have changed during the day.
[Hmm, perhaps that's not true - e.g., EOD data has a "close" that can later
be updated due to after-hours trading - investigate!!])

(7c) [(7) - analysis run - details of how the analysis is started]
When an analysis run is triggered (either due to an event [7a] or a
time-alarm [7b]), the "AnalysisSchedule"s associated with the *Trigger object
(i.e., PeriodicTrigger or EventBasedTrigger) are found via a database query
(on the triggered_by_type and triggered_by_id fields of AnalysisSchedule).
For each resulting AnalysisSchedule, s:

  - Retrieve all of s's "AnalysisProfile"s (via analysis_client_type and
    analysis_client_id).
  - For each AnalysisProfile, p, belonging to s:
      - Extract the specs for the run from p's attributes.
      - Invoke the analysis using those specs as criteria [to be
        continued/further-elaborated...!!!!]

=============================================================================

classes or entities or whatever - i.e., likely will end up in database:

user:

  - ...
  - scheduled-analysis-profiles (list)
  - analysis-profiles (list)

analysis-schedule (name: WIP):

  - name
  - triggered_by: triggering_event [time or change][1][2]
  - active: boolean (false means the schedule/record is ignored)
  - analysis-profiles (list or one?)
  - notification-recipients (list)

triggering_event (i.e., event that triggers an analysis run):
(maybe just 'trigger' instead of 'triggering_event')

  - type ('time' or 'change')
  - contents (e.g., '2032/05/12@11:00:00' or 'EOD data available')

schedule (name?) [WIP - probably obsolete]

  - name
  - trigger: event [i.e., time-triggered-event or change-triggered-event][1][2]
  - trigger_type ('time', or 'change')

analysis-profile:

  - name
  - event-generation-profiles (list)

event-generation-profile:

  - end-date (often "now")
  - analysis-period-length (determines start date) [todo: document in code!!!]
  - event-generation-specifications (list of tradable-processor-specification)

tradable-processor-specification:

  - specification-name[?] (suggestion: no 'name' needed)
  - processor-id
  - processor-name
  - period-type
  - parameters (list of tradable-processor-parameter)

tradable-processor-parameter:

  - name
  - sequence_number
  - value
  - data-type

charting-specification:

  - period-type
  - end-date (usually "now")
  - charting-period-length (determines start date)
  - top-indicators (e.g., EMA; probably tradable-processor-specification)
  - bottom-indicators (e.g., MACD; probably tradable-processor-specification)

notification-recipient:

  - notification-media-specifications (list)

notification-media-specification:

  - medium        (e.g., email, text, ...)
  - recipient-id  (e.g., recip@users.org when medium is 'email')

tradable-event

  - event-id?
  - datetime
  - analyzer...???


An analysis-profile has 0 or more event-generation-profiles.
Each of those event-generation-profiles has a set of
event-generation-specifications and an end-date and period-length,
so that the same start/end-date/time will be applied to each
event-generator specified in event-generation-specifications.
The event-generation-specification (AKA tradable-processor-specification)
ids a specific event-generator and includes the parameter settings
(parameter-specifications), and the period-type, to use for that
event-generator.

Thus a scheduled or ad-hoc analysis run will use one analysis profile,
which will run a set of analyses, each of which has a start- and
end-date/time and will use one or more event-generators.

NOTES:

[1] time-triggered-event: "event" triggered, or defined, by the actual time
coinciding with a scheduled "alarm" time.  (E.g., scheduled "alarm" time is
14:30EST and the real/actual time is now 14:30:00EST)
change-triggered-event:   "event" triggered, or defined, by a specific
occurrence, or event, that causes a detectable change in the system or
environment.  (E.g., The latest EOD data becomes available for the current
day.)
[2] This trigger/event might be represented via 2 (or more?) different
tables.  E.g.: a time-triggered-event in a (name-in-flux) "time_triggers"
table; and a change-triggered-event in an (name-in-flux)
"environmental-changes" (name-in-flux) table.  Possible example of
use of change-triggered-event table: A periodic monitoring process discovers
that EOD data is now available for all stocks.  The process creates a new
record in the "environmental-changes" table.  If the record/event is of the
right type (which it will be if the trigger is supposed to be that
"eod-data-available"), an assigned agent (process/function) checking the
analysis-schedule.trigger will find that it has been triggered (i.e., the
awaited event has occurred and has not yet been processed) and will as a
result invoke an analysis run using the analysis-profile for the
analysis-schedule record being checked.

=============================================================================

Other ideas to be developed or discarded:
  - The user will have the option to specify (in the "notification profile"
    or perhaps the "analysis profile") that all generated events be stored
    in the database and whether or not, for any run, any event that is
    identical (same even-type, date, ...) to one stored in the database
    will be discarded.  This is to allow the user, if she wishes, to not be
    notified of such duplicate events.
  - Optionally, display trading events on the stock/commodity chart.

=============================================================================
# vim: expandtab
