                    EVENT-GENERATION-RELATED DATABASE TABLES


rails g model PeriodicTrigger interval_seconds:integer time_window_start:time \
  time_window_end:time daily_schedule:integer
rails g model EventBasedTrigger triggered_event_type:integer active:boolean
rails g model AnalysisSchedule name:string active:boolean \
  trigger:references{polymorphic} \ # PeriodicTrigger or EventBasedTrigger
  user:references
rails g model AnalysisProfile name:string \
  analysis_client:references{polymorphic} # User or AnalysisSchedule
rails g model EventGenerationProfile AnalysisProfile:references \
  end_date:datetime analysis_period_length_seconds:integer
rails g model TradableProcessorSpecification EventGenerationProfile:references \
  processor_id:integer period_type:integer

# (Will have a many-to-many rel. with AnalysisProfile via join table.)
rails g model NotificationTarget user:references \
  medium_type:integer contact_identifier:string extra_data:string
rails g migration CreateJoinTable analysis_profiles notification_targets
# (probably) Make it look like this:
#create_join_table :analysis_profiles, :notification_targets do |t|
#  t.index :analysis_profile_id
#  t.index :notification_target_id
#  t.index [:analysis_profile_id, :notification_target_id],
#            name: 'ana_prof_notification_tgt', unique: true
#end

rails g model AnalysisRun user:references status: integer \
  start_date:datetime end_date:datetime analysis_profile_name:string \
  run_start_time:datetime
  # Need to add virtual attribute: completion_time (updated_at or created_at)

rails g model TradableProcessorRun analysis_run:references \
  processor_id:integer period_type:integer

rails g model tradableProcessorParameterSetting \
tradable_processor_run:references name:string value:string

rails g model AnalysisEvent tradable_processor_run:references \
  event_type_id:integer date_time:datetime signal_type:string
# Add:      t.string :signal_type, :limit => 1


tradable-processor-specification:

  - processor-id
  - processor-name
  - period-type
  - parameters (list of tradable-processor-parameter)

{
event_generation_profiles:

  end_date: datetime [null represents "now"]
  analysis_period_length: integer [seconds]
  analysis_profile_id (null NOT allowed)
}

(
[https://stackoverflow.com/questions/25937298/ruby-on-rails-global-activerecordenum]
[http://api.rubyonrails.org/v5.2.0/classes/ActiveRecord/Enum.html]
module TriggeredEventType
  extend ActiveSupport::Concern
  included do
    enum triggered_event_type: {
      user_triggered:         1,
      EOD_US_stocks:          2,
    }
  end
  # (Add a map for triggered_event_type => description?!!!)
end
class EventBasedTrigger < ApplicationRecord
  include TriggeredEventType
end
)
(
PeriodicTrigger: suggestion: Include logic outside of the database that
  determines whether "today" is a trading day, rather than using a field
  in the database for this.  (Looks like we need a MarketSchedule class,
  with descendants such as NYSE_Schedule, CBOT_Schedule, etc.)
  [https://wallstreetdaily.com/nyse-stock-market-holiday-closings-schedule/]
EventBasedTrigger is probably just a name/boolean pair - e.g., if
"EOD data available", set active (hot/triggered/...?) = true where name =
"eod-available"
)
([old/obsolete - use for reference:]
trigger_event_types:
  "user-triggered", "user ordered
  "EOD US stocks", "For US stocks: today's EOD data is available"
)
{ Consider: use polymorphic association:
class AnalysisProfile < ApplicationRecord
  belongs_to :analysis_client, polymorphic: true
end

class User < ApplicationRecord
  has_many :analysis_profiles, as: :analysis_client
end

class AnalysisSchedule < ApplicationRecord
  has_many :analysis_profiles, as: :analysis_client
OR:
  has_one :analysis_profiles, as: :analysis_client
(probably has_many, but usually, or at least often, just one)
  has_many :notification_recipients
end
}

analysis-schedules

  - schedule: <TBD>
  (- analysis-profiles (list or one?))
  (- notification-recipients (list))
  (- user_id)

analysis_profiles:

  name
  user_id (null NOT allowed)
  save_results
  notification_profile_id (null allowed) [remove this/use join-table?]

event_generation_profiles:

  end_date: datetime [null represents "now"]
  analysis_period_length: integer [seconds]
  analysis_profile_id (null NOT allowed)

tradable_processor_specifications:

  name [removed]
  processor_id: integer
  period_type_id: integer [See PeriodTypeConstants]

event_generation_tradable_processor_specifications: (join table)
[obsolete, I think]

  tradable_processor_specification_id: integer
  event_generation_profile_id: integer

tradable_processor_parameters:

  name: string
  sequence_number: integer
  value: string
  data_type: string
  tradable_processor_specification_id

notification_recipients:

  name: string
  - notification-media-specifications (list)
  notification_profile_id

notification_media_specifications:

  medium: <TBD>   [e.g., email, text, ...]
  recipient_id    (e.g., recip@users.org when medium is 'email')
  notification_recipient_id


[IN PROGRESS]

charting_specifications:

  [TBD]
  end_date: datetime [null represents "now"]
  charting_period_length: integer [minutes]
  period_type_id: integer [See PeriodTypeConstants]

charting_tradable_processor_specifications: ([proposed] join table)

  tradable_processor_specification_id: integer
  charting_specification_id: integer

analysis_runs[1]:

  - status                   (enum: :completed, :failed, [:running?, :stopped?])
  - start_date               (evgen_profile.start_date)
  - end_date                 (evgen_profile.end_date)
  - analysis_profile_name:   string [2]
  - analysis_profile_client: string (user.emailaddr or ana-sched.name)
  - run_start_time:          date-time
  - ['created_at' will function as 'completion_time' (virtual/query attrib)]

tradable_processor_runs[3]:

  - analysis_run_id: integer [FK]
  - processor_id:    integer [4]
  - period_type:     integer

tradable_processor_parameter_settings:

  - tradable_processor_run_id [FK]
  - name
  - value

analysis_events:

  - tradable_processor_run_id [FK]
  - event_type_id:  integer (MAS: known as event_id, or eventID) (See [4].)
  - date_time:      date_time (date & time of the "event" in the dataset)
  - signal_type[6]: string (length: 1 [7]; values: ['b','s','n','o'] [8])
    [9]

notification_targets:

  - medium_type:        enum  (:email, :text, ...)
  - contact_identifier: string (email-addr, phone-#, or ...)
  - extra_data:         string (optional field for, e.g., more id info, etc.)
  - user_id:            integer (i.e., 1 user to many notification-targets)

chart_positions:

  position: string {"top", "bottom"}

indicator_chart_positions: (maps each indicator to "top" or "bottom" of chart)

  chart_position_id
  indicator_id


NOTES:

[1] AnalysisRun corresponds to EventGenerationProfile.
('analysis_profile_name' "id"s the AnalysisProfile that the EGP belonged to.)
[2] Since analysis-profiles will likely be deleted at some point, it seems
best to store the 'analysis_profile_name' here, rather than the
'analysis_profile_id'.  Then, when an analysis-profile that was used for a
particular analysis-run is deleted, instead of having a meaningless
analysis_profile_id, it will have the name of the analysis-profile that was
used (which, if well-named, will be at least somewhat meaningful).
[3] TradableProcessorRun corresponds to TradableProcessorSpecification.
[4] processor_id (synonymous with the other term sometimes used,
"event-id") will correspond to the processor_id of the associated
TradableProcessorSpecification (if it exists).  This processor_id (or
"event-id") is also the id sent to the MAS server to request processing for
a particular tradable-processor (AKA event-generator).  (I.e., the
event-data-request [event_data_req], which consists of:
  mkt_symbol <mfs> start_date <mfs> end_date <mfs> evgen_list
and evgen_list is:
  { evgen_key dfs ... }+
evgen_key is:
  eventID ":" trad_per_type
and eventID, of course, corresponds to "event-id", which is the processor_id.
Note: processor_id also functions as a foreign key into tradable_analyzers
(.event_id).  That should be a way to get the proc. name if the associated
TradableProcessorSpecification has been deleted.
[5] event_type_id is a better (more accurate) name than event_id, but
event_id is the legacy name for this "concept".
[6] Used to be called 'event_type'.
[7] E.g.:
class CreateXXX < ActiveRecord::Migration
  def change
    create_table :analysis_events do |t|
      ...
      t.string :signal_type, :limit => 1
    end
  end
end
[8] See TYPE_TABLE in TradableEventInterface.
[9] It might be useful to add a virtual "period_type" attribute/query (
obtained from TradableProcessorRun).
